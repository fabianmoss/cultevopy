---
subtitle: ""
jupyter: python3
---

# Biased transmission: frequency-dependent indirect bias {#sec-frequency-biased-transmission}

:::{.callout-note}
This chapter is based on "Chapter 4: Biased transmission: frequency-dependent indirect bias" in @Acerbi2022.
:::

```{python}
import numpy as np 
rng = np.random.default_rng()

import pandas as pd
```

```{python}
def plot_multiple_runs(data_model):
    groups = data_model.groupby("run")
    for _, g in groups:
        g.index = g["generation"]
        g["p"].plot(lw=.5, ylim=(0,1))

    data_model.groupby("generation")["p"].mean().plot(c="k", lw="1")
```

```{python}
N = 100
p_0 = .5
D = 1.
```

```{python}
# Create first generation
population = pd.DataFrame({"trait": rng.choice(["A", "B"], size=N, replace=True, p=[p_0, 1-p_0])})
```

```{python}
# Create a DataFrame with a set of 3 randomly-picked demonstrators for each agent

demonstrators = pd.DataFrame({
    "dem1" : population["trait"].sample(N, replace=True).values,
    "dem2" : population["trait"].sample(N, replace=True).values,
    "dem3" : population["trait"].sample(N, replace=True).values
})
```

```{python}
# Visualize the DataFrame
demonstrators.head()
```

```{python}
# Get the number of A's in each 3-demonstrator combination
num_As = (demonstrators == "A").apply(sum, axis=1)
num_As.head()
```

```{python}
# For 3-demonstrator combinations with all A's, set to A
population[ num_As == 3 ] = "A"
# For 3-demonstrator combinations with all B's, set to B
population[ num_As == 0 ] = "B"
```

```{python}
prob_majority = rng.choice([True, False], p=[(2/3 + D/3), 1-(2/3 + D/3)], size=N, replace=True)
prob_minority = rng.choice([True, False], p=[(1/3 + D/3), 1-(1/3 + D/3)], size=N, replace=True)
```

```{python}
# 3-demonstrator combinations with two As and one B
condition = prob_majority & (num_As == 2)
if condition.sum() > 0:
    population.loc[condition, "trait"] = "A"
condition = ~prob_majority & (num_As == 2)
if condition.sum() > 0:
    population.loc[condition, "trait"] = "B"

# 3-demonstrator combinations with two B's and one A
condition = ~prob_minority & (num_As == 1)
if condition.sum() > 0:
    population.loc[condition, "trait"] = "A"
condition = prob_minority & (num_As == 1)
if condition.sum() > 0:
    population.loc[condition, "trait"] = "B"
```

```{python}
demonstrators["new_trait"] = population["trait"]
demonstrators.head()
```

```{python}
def conformist_transmission(N, p_0, D, t_max, r_max):
    # Create the output DataFrame
    output = pd.DataFrame({
        "generation" : np.tile(np.arange(t_max), r_max),
        "p" : [ np.nan ] * t_max * r_max,
        "run" : np.repeat(np.arange(r_max), t_max)
    })

    for r in range(r_max):
        # Create first generation
        population = pd.DataFrame({"trait": rng.choice(["A", "B"], size=N, replace=True, p=[p_0, 1 - p_0])})

        # Add first generation's p for run r
        output.loc[ r * t_max, "p"] = population[ population["trait"] == "A" ].shape[0] / N

        # For each generation 
        for t in range(1,t_max):
            demonstrators = pd.DataFrame({
                "dem1" : population["trait"].sample(N, replace=True).values,
                "dem2" : population["trait"].sample(N, replace=True).values,
                "dem3" : population["trait"].sample(N, replace=True).values
            })

            # Get the number of A's in each 3-demonstrator combination
            num_As = (demonstrators == "A").apply(sum, axis=1)

            # For 3-demonstrator combinations with all A's, set to A
            population[ num_As == 3 ] = "A"
            # For 3-demonstrator combinations with all A's, set to A
            population[ num_As == 3 ] = "A"
            # For 3-demonstrator combinations with all B's, set to B
            population[ num_As == 0 ] = "B"

            prob_majority = rng.choice([True, False], p=[(2/3 + D/3), 1-(2/3 + D/3)], size=N, replace=True)
            prob_minority = rng.choice([True, False], p=[(1/3 + D/3), 1-(1/3 + D/3)], size=N, replace=True)

            # 3-demonstrator combinations with two As and one B
            condition = prob_majority & (num_As == 2)
            if condition.sum() > 0:
                population.loc[condition, "trait"] = "A"
            condition = ~prob_majority & (num_As == 2)
            if condition.sum() > 0:
                population.loc[condition, "trait"] = "B"

            # 3-demonstrator combinations with two B's and one A
            condition = prob_minority & (num_As == 1)
            if condition.sum() > 0:
                population.loc[condition, "trait"] = "A"
            condition = ~prob_minority & (num_As == 1)
            if condition.sum() > 0:
                population.loc[condition, "trait"] = "B"
            
            # Get p and put it into output slot for this generation t and run r
            output.loc[r * t_max + t, "p"] = population[ population["trait"] == "A" ].shape[0] / N

    return output
```

```{python}
data_model = conformist_transmission(N=1_000, p_0 = 0.5, D = 1, t_max = 50, r_max = 10)
plot_multiple_runs(data_model)
```



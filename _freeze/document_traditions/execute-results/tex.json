{
  "hash": "496607e9148b0c7ec3b1389a71328942",
  "result": {
    "markdown": "# Modeling document traditions\n\nHere, we show how one can use cultural evolution \nmethods to model the histories of manuscripts.\nThis is based on a phylogenetic analysis of a Prelude \nby Orlando Gibbons [@Windram2014_PhylogeneticAnalysisOrlando].\n\n## Context\n\nMutations create new traditions [TODO]\n\n## Data and coding\n\nWe use the same data as in [@Windram2014_PhylogeneticAnalysisOrlando]^[I am grateful to Heather Windram for providing\nthe data and to Francis Windram for helping me to parse it properly.] \n\nThis is a case of a qualitative encoding, because the features\nwere manually chosen and encoded according to the expert's opinion.\n\nIn the context of this chapter, we will rely on implementations \nof several algorithms in the _BioPython_ library. \nWe also implot `matplotlib` for visualization.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom Bio import SeqIO, AlignIO, Phylo\nfrom Bio.Phylo.TreeConstruction import DistanceCalculator, DistanceTreeConstructor\n\nimport matplotlib\nimport matplotlib.pyplot as plt\n```\n:::\n\n\nThe data codings are stored in the file `gibbons_prelude.nex` in the [NEXUS format](https://en.wikipedia.org/wiki/Nexus_file). \nFirst, let's have a look at the file's contents:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nfile = \"data/gibbons_prelude.nex\"\nwith open(file) as f:\n    for line in f.readlines():\n        line = line.rstrip(\"\\n\") # remove trailing line breaks\n        print(line[:65])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n#NEXUS\n[! 01-Nov-2013 - with taxanames 07-Feb-2023]\nBEGIN taxa;\n\tDIMENSIONS NTAX=16;\n\tTAXLABELS\n    [1] Parthenia\n    [2] Lcm2093\n    [3] Och47\n    [4] Och89\n    [5] Lbl31403\n    [6] NYp5612\n    [7] Cfm653\n    [8] Lbl22099\n    [9] LynarA2\n    [10] Lbl23623i\n    [11] Lbl23623ii\n    [12] PcRes1186bisI\n    [13] LblMus1\n    [14] TnN335\n    [15] Dolmetsch\n    [16] Filmer17\n\t\n;\nEND;\nBEGIN characters;\n\tdimensions nchar=610;\n\tformat\n\t\tdatatype=standard\n\t\tmissing=?\n\t\trespectcase SYMBOLS=\"0123456789abcdefghijklmnopqrstuvwxyz\";\n\tmatrix\nParthenia       000000000000000000000000000000000000000?000000000\nLcm2093         110010100000000000000000000000000001000?000000011\nOch47           00002110110011110110111?1010100010010010000000012\nOch89           000031102001000000000000000020000011112?100000010\nLbl31403        220010?10000200000010000010120000002022?100000013\nNYp5612         33000020110000000000000000000000001?000?0000000?0\nCfm653          22110011110011110210121111?031?01001022?00100??11\nLbl22099        401000113?11111102101211111041011001022?11?100013\nLynarA2         000000211100000000000000000000000013000?000000023\nLbl23623i       540001?000101121100000000000000001100?2?001110001\nLbl23623ii      640001?01110111100000000000000000011002?001110011\nPcRes1186bisI   200000110000112113000300000020000001022?100000011\nLblMus1         2100001000011111011014001010500010010010000000011\nTnN335          750100111100111104101511111031001001002?001000013\nDolmetsch       811000100001111100000000021061000001002?001000011\nFilmer17        2110001000002000000000000000200000010011000000011\n\t;\nEND;\n\n```\n:::\n:::\n\n\nThe file's structure is very clear. In the header,\nit declares its format (`#NEXUS`) along with some metadata,\nand then lists the 16 'taxa' (the original _Parthenia_ \nand its different copies).\nIt further describes the encoding scheme, namely\nwhich `SYMBOLS` can be used (integers from 0-9 \nas well as lowercase roman letters), and that the `?` symbol\nwill be used for missing data. We also can see that the dimensionality is `nchar=610`, meaning that the encoding \nemcompasses 610 different features.\n\nLet's read in the file using BioPython's built-in parser and print the names of all manuscripts:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nfor manuscript in SeqIO.parse(file, format=\"nexus\"):\n    print(manuscript.name)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nParthenia\nLcm2093\nOch47\nOch89\nLbl31403\nNYp5612\nCfm653\nLbl22099\nLynarA2\nLbl23623i\nLbl23623ii\nPcRes1186bisI\nLblMus1\nTnN335\nDolmetsch\nFilmer17\n```\n:::\n:::\n\n\n## Sequence alignment \n\nEach manuscript containing Gibbon's Prelude is encoded as a string of characters (see above). In order to find deviations, \nmutations, and errors in the sequences, we will find best alignments of the manuscript encodings using BioPython.\nWhile the alignments here rely purely on visual and philological \nfeatures of the text, this methodology has also been successfully applied to melodic variations  [@Savage2022_SequenceAlignmentFolk].\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nalignments = list(AlignIO.parse(file, format=\"nexus\"))[0]\nprint(alignments[:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAlignment with 3 rows and 610 columns\n[{'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['?']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}]...[{'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}] Parthenia\n[{'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['?']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}]...[{'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['?']}, {'t': 'std', 'd': ['1']}] Lcm2093\n[{'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['2']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['?']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['0']}]...[{'t': 'std', 'd': ['0']}, {'t': 'std', 'd': ['1']}, {'t': 'std', 'd': ['1']}] Och47\n```\n:::\n:::\n\n\n## Constructing a possible lineage\n\nWe are now in the position to create a possible hereditance\nsystem out of these alignments because we can use these closest\nalignments to determine pairwise distances between the \nsequences. \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ncalculator = DistanceCalculator(model=\"identity\")\ndistance_matrix = calculator.get_distance(alignments)\nconstructor = DistanceTreeConstructor(calculator)\n```\n:::\n\n\nFrom this constructor, we can now build a tree:\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ntree = constructor.build_tree(alignments)\nprint(tree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTree(rooted=False)\n    Clade(branch_length=0, name='Inner14')\n        Clade(branch_length=0.020120389344262246, name='Inner12')\n            Clade(branch_length=0.08942964480874313, name='Inner7')\n                Clade(branch_length=0.3522540983606557, name='Lbl31403')\n                Clade(branch_length=0.12725409836065588, name='Inner2')\n                    Clade(branch_length=0.2826292559899118, name='Filmer17')\n                    Clade(branch_length=0.13868221941992426, name='Och89')\n            Clade(branch_length=0.22552937158469957, name='Inner1')\n                Clade(branch_length=0.10017564402810297, name='NYp5612')\n                Clade(branch_length=0.09162763466042156, name='Parthenia')\n        Clade(branch_length=0.005033299180327883, name='Inner13')\n            Clade(branch_length=0.021810963114754167, name='Inner11')\n                Clade(branch_length=0.11976178278688522, name='Inner6')\n                    Clade(branch_length=0.287431693989071, name='LblMus1')\n                    Clade(branch_length=0.23060109289617492, name='Lbl22099')\n                Clade(branch_length=0.01732838114754097, name='Inner10')\n                    Clade(branch_length=0.3853483606557378, name='Cfm653')\n                    Clade(branch_length=0.13186475409836057, name='Inner4')\n                        Clade(branch_length=0.18412816691505207, name='TnN335')\n                        Clade(branch_length=0.2535767511177348, name='Och47')\n            Clade(branch_length=0.03418288934426228, name='Inner9')\n                Clade(branch_length=0.06726434426229502, name='Inner8')\n                    Clade(branch_length=0.2635538641686183, name='PcRes1186bisI')\n                    Clade(branch_length=0.26595433255269324, name='LynarA2')\n                Clade(branch_length=0.19298155737704922, name='Inner3')\n                    Clade(branch_length=0.23695355191256845, name='Dolmetsch')\n                    Clade(branch_length=0.08763661202185774, name='Lcm2093')\n        Clade(branch_length=0.13326075819672134, name='Inner5')\n            Clade(branch_length=0.28704918032786886, name='Lbl23623ii')\n            Clade(branch_length=0.18836065573770489, name='Lbl23623i')\n```\n:::\n:::\n\n\nThe Phylo library provides a convenient function to plot this tree:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nfor clade in tree.get_nonterminals():\n    clade.name = \"\"\nfig = Phylo.draw(tree)\n```\n\n::: {.cell-output .cell-output-display}\n![](document_traditions_files/figure-pdf/cell-8-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Being confident\n\nUse bootstrapping.\n\n## Conclusion\n\nBriefly discuss NeighborNet graph and point to similar approach in \n[@Windram2022_PhylogeneticAnalysisTwo]. \n\n",
    "supporting": [
      "document_traditions_files/figure-pdf"
    ],
    "filters": []
  }
}
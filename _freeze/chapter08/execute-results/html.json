{
  "hash": "1cca7b7eae083a3ad4fb1b0489280bf3",
  "result": {
    "markdown": "---\ntitle: Vertical and horizontal transmission\nexecute:\n  freeze: auto\n---\n\n:::{.callout-note}\nThis chapter is based on \"Chapter 6: Vertical and horizontal transmission\" in @Acerbi2022.\n:::\n\n## Vertical cultural transmission {#sec-vertical}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np \nrng = np.random.default_rng()\n\nimport pandas as pd\nfrom tqdm import tqdm\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef plot_multiple_runs(data_model):\n    groups = data_model.groupby(\"run\")\n    for _, g in groups:\n        g.index = g[\"generation\"]\n        g[\"p\"].plot(lw=.5, ylim=(0,1))\n\n    data_model.groupby(\"generation\")[\"p\"].mean().plot(c=\"k\", lw=\"1\")\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef vertical_transmission(N, p_0, b, t_max, r_max):\n    # Create the output DataFrame\n    output = pd.DataFrame({\n        \"generation\" : np.tile(np.arange(t_max), r_max),\n        \"p\" : [ np.nan ] * t_max * r_max,\n        \"run\" : np.repeat(np.arange(r_max), t_max)\n    })\n\n    for r in range(r_max): \n        # Create first generation\n        population = pd.DataFrame({\"trait\": rng.choice([\"A\", \"B\"], size=N, replace=True, p=[p_0, 1 - p_0])})\n\n        # Add first generation's p for run r\n        output.loc[ r * t_max, \"p\"] = population[ population[\"trait\"] == \"A\" ].shape[0] / N\n\n        # # For each generation \n        for t in range(1, t_max): \n            # Copy individuals to previous_population DataFrame\n            previous_population = population.copy()\n\n            # randomly pick mothers and fathers\n            mother = previous_population[\"trait\"].sample(N, replace=True).reset_index(drop=True)\n            father = previous_population[\"trait\"].sample(N, replace=True).reset_index(drop=True)\n\n            # prepare next generation\n            population = pd.DataFrame({\"trait\": [np.nan] * N })\n\n            # Both parents are A, thus child adopts A\n            both_A = (mother == \"A\") & (father == \"A\")\n            # if sum(both_A) > 0:\n            population.loc[both_A,\"trait\"] = \"A\"\n\n            # Both parents are A, thus child adopts A\n            both_B = (mother == \"B\") & (father == \"B\")\n            # if sum(both_B) > 0:\n            population.loc[both_B,\"trait\"] = \"B\"\n\n            # If any empty NA slots are present (i.e. one A and one B parent) they adopt A with probability b\n            remaining = rng.choice([\"A\", \"B\"], size=population[\"trait\"].isna().sum(), replace=True, p=[b, 1 - b])\n            population.loc[population[\"trait\"].isna(),\"trait\"] = remaining\n            \n            # Get p and put it into output slot for this generation t and run r\n            output.loc[r * t_max + t, \"p\"] = population[ population[\"trait\"] == \"A\" ].shape[0] / N\n\n    return output \n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndata_model = vertical_transmission(N=10_000, p_0=0.01, b=0.6,t_max=50, r_max=5)\n\nplot_multiple_runs(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter08_files/figure-html/cell-5-output-1.png){width=571 height=427}\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndata_model = vertical_transmission(N=10_000, p_0=0.1, b=0.5,t_max=50, r_max=5)\nplot_multiple_runs(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter08_files/figure-html/cell-6-output-1.png){width=571 height=427}\n:::\n:::\n\n\n## Horizontal cultural transmission\n\n::: {.callout-warning}\nThe code below is not yet correct and runs very slowly.\n:::\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef vertical_horizontal_transmission(N, p_0, b, n, g, t_max, r_max):\n    # Create the output DataFrame\n    output = pd.DataFrame({\n        \"generation\" : np.tile(np.arange(t_max), r_max),\n        \"p\" : [ np.nan ] * t_max * r_max,\n        \"run\" : np.repeat(np.arange(r_max), t_max)\n    })\n\n    for r in range(r_max):\n        # Create first generation\n        population = pd.DataFrame({\"trait\": rng.choice([\"A\", \"B\"], size=N, replace=True, p=[p_0, 1 - p_0])})\n\n        # Add first generation's p for run r\n        output.loc[ r * t_max, \"p\"] = population[ population[\"trait\"] == \"A\" ].shape[0] / N\n\n        # For each generation \n        for t in tqdm(range(t_max)):\n            ### Vertical transmission =========================================================\n\n            # Copy individuals to previous_population DataFrame\n            previous_population = population.copy()\n\n            # randomly pick mothers and fathers\n            mother = previous_population[\"trait\"].sample(N, replace=True).reset_index(drop=True)\n            father = previous_population[\"trait\"].sample(N, replace=True).reset_index(drop=True)\n\n            # prepare next generation\n            population = pd.DataFrame({\"trait\": [np.nan] * N })\n\n            # Both parents are A, thus child adopts A\n            both_A = (mother == \"A\") & (father == \"A\")\n            # if sum(both_A) > 0:\n            population.loc[both_A,\"trait\"] = \"A\"\n\n            # Both parents are A, thus child adopts A\n            both_B = (mother == \"B\") & (father == \"B\")\n            # if sum(both_B) > 0:\n            population.loc[both_B,\"trait\"] = \"B\"\n\n            # If any empty NA slots are present (i.e. one A and one B parent) they adopt A with probability b\n            remaining = rng.choice([\"A\", \"B\"], size=population[\"trait\"].isna().sum(), replace=True, p=[b, 1 - b])\n            population.loc[population[\"trait\"].isna(),\"trait\"] = remaining\n            \n            # Get p and put it into output slot for this generation t and run r\n            output.loc[r * t_max + t, \"p\"] = population[ population[\"trait\"] == \"A\" ].shape[0] / N\n\n            # ### Horizontal transmission =========================================================\n\n            # previous_population = population.copy()\n            # # # N_B = number of Bs\n            # N_B = previous_population[previous_population[\"trait\"] == \"B\"].shape[0]\n\n            # # if there are B individuals to switch, and n is not zero:\n            # if (N_B > 0) & (n > 0):\n            #     # for each B individual:\n            #     for i in range(N_B):\n            #         # Pick n demonstrators\n            #         demonstrator = previous_population[\"trait\"].sample(n, replace=True)\n            #         # Get probability g \n            #         copy_ = rng.choice([True, False], n, p=[g, 1 - g], replace=True)\n            #         # if any demonstrators with A are to be copied:\n            #         if sum((demonstrator == \"A\") & (copy_)) > 0:\n            #           # The B individual switches to A \n            #           population[previous_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n\n            next_population = population.copy()\n            # # N_B = number of Bs\n            N_B = next_population[next_population[\"trait\"] == \"B\"].shape[0]\n\n            # if there are B individuals to switch, and n is not zero:\n            if (N_B > 0) & (n > 0):\n                # for each B individual:\n                for i in range(N_B):\n                    # Pick n demonstrators\n                    demonstrator = population[\"trait\"].sample(n, replace=True)\n                    # Get probability g \n                    copy_ = rng.choice([True, False], n, p=[g, 1 - g], replace=True)\n                    # if any demonstrators with A are to be copied:\n                    if sum((demonstrator == \"A\") & (copy_)) > 0:\n                      # The B individual switches to A \n                      next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n\n            # Get p and put it into output slot for this generation t and run r\n            output.loc[r * t_max + t, \"p\"] = next_population[ next_population[\"trait\"] == \"A\" ].shape[0] / N\n\n    return output\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nvertical_horizontal_transmission(N=1000, p_0=0.01, b=0.5, n=5, g=0.1, t_max=10, r_max=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|          | 0/10 [00:00<?, ?it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 10%|█         | 1/10 [00:00<00:04,  2.13it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 20%|██        | 2/10 [00:00<00:02,  2.70it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 30%|███       | 3/10 [00:01<00:02,  2.92it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 40%|████      | 4/10 [00:01<00:01,  3.01it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 50%|█████     | 5/10 [00:01<00:01,  3.20it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 60%|██████    | 6/10 [00:01<00:01,  3.35it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 70%|███████   | 7/10 [00:02<00:00,  3.35it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 80%|████████  | 8/10 [00:02<00:00,  3.44it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 90%|█████████ | 9/10 [00:02<00:00,  3.19it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r100%|██████████| 10/10 [00:03<00:00,  2.85it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r100%|██████████| 10/10 [00:03<00:00,  3.02it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>generation</th>\n      <th>p</th>\n      <th>run</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0.011</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0.012</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>0.009</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>0.009</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>0.011</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>5</td>\n      <td>0.013</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>6</td>\n      <td>0.012</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>7</td>\n      <td>0.014</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>8</td>\n      <td>0.009</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>9</td>\n      <td>0.011</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndata_model = vertical_horizontal_transmission(N=5_000, p_0=0.01, b=0.5, n=5, g=0.1, t_max=50, r_max=2)\nplot_multiple_runs(data_model)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|          | 0/50 [00:00<?, ?it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  2%|▏         | 1/50 [00:01<01:22,  1.68s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  4%|▍         | 2/50 [00:03<01:17,  1.61s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  6%|▌         | 3/50 [00:05<01:24,  1.81s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  8%|▊         | 4/50 [00:07<01:22,  1.79s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 10%|█         | 5/50 [00:08<01:17,  1.73s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 12%|█▏        | 6/50 [00:10<01:11,  1.61s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 14%|█▍        | 7/50 [00:11<01:06,  1.54s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 16%|█▌        | 8/50 [00:12<01:02,  1.48s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 18%|█▊        | 9/50 [00:14<00:58,  1.43s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 20%|██        | 10/50 [00:15<00:56,  1.41s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 22%|██▏       | 11/50 [00:16<00:53,  1.38s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 24%|██▍       | 12/50 [00:18<00:52,  1.37s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 26%|██▌       | 13/50 [00:19<00:50,  1.38s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 28%|██▊       | 14/50 [00:20<00:49,  1.37s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 30%|███       | 15/50 [00:22<00:47,  1.35s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 32%|███▏      | 16/50 [00:23<00:45,  1.34s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 34%|███▍      | 17/50 [00:24<00:43,  1.31s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 36%|███▌      | 18/50 [00:25<00:41,  1.29s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 38%|███▊      | 19/50 [00:27<00:40,  1.30s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 40%|████      | 20/50 [00:28<00:38,  1.29s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 42%|████▏     | 21/50 [00:29<00:38,  1.31s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 44%|████▍     | 22/50 [00:31<00:36,  1.31s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 46%|████▌     | 23/50 [00:32<00:35,  1.30s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 48%|████▊     | 24/50 [00:33<00:33,  1.29s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 50%|█████     | 25/50 [00:35<00:31,  1.27s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 52%|█████▏    | 26/50 [00:36<00:30,  1.25s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 54%|█████▍    | 27/50 [00:37<00:28,  1.25s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 56%|█████▌    | 28/50 [00:38<00:27,  1.24s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 58%|█████▊    | 29/50 [00:40<00:26,  1.28s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 60%|██████    | 30/50 [00:41<00:25,  1.29s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 62%|██████▏   | 31/50 [00:42<00:25,  1.34s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 64%|██████▍   | 32/50 [00:44<00:25,  1.40s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 66%|██████▌   | 33/50 [00:45<00:23,  1.40s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 68%|██████▊   | 34/50 [00:47<00:23,  1.47s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 70%|███████   | 35/50 [00:49<00:23,  1.54s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 72%|███████▏  | 36/50 [00:50<00:21,  1.57s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 74%|███████▍  | 37/50 [00:52<00:19,  1.50s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 76%|███████▌  | 38/50 [00:53<00:17,  1.49s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 78%|███████▊  | 39/50 [00:54<00:15,  1.40s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 80%|████████  | 40/50 [00:56<00:13,  1.40s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 82%|████████▏ | 41/50 [00:57<00:12,  1.33s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 84%|████████▍ | 42/50 [00:58<00:10,  1.29s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 86%|████████▌ | 43/50 [01:00<00:09,  1.37s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 88%|████████▊ | 44/50 [01:01<00:08,  1.34s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 90%|█████████ | 45/50 [01:02<00:06,  1.30s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 92%|█████████▏| 46/50 [01:03<00:05,  1.29s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 94%|█████████▍| 47/50 [01:05<00:04,  1.40s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 96%|█████████▌| 48/50 [01:06<00:02,  1.34s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 98%|█████████▊| 49/50 [01:07<00:01,  1.30s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r100%|██████████| 50/50 [01:09<00:00,  1.26s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r100%|██████████| 50/50 [01:09<00:00,  1.38s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  0%|          | 0/50 [00:00<?, ?it/s]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  2%|▏         | 1/50 [00:01<01:12,  1.49s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  4%|▍         | 2/50 [00:02<01:08,  1.42s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  6%|▌         | 3/50 [00:04<01:09,  1.48s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r  8%|▊         | 4/50 [00:05<01:09,  1.50s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 10%|█         | 5/50 [00:07<01:06,  1.47s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 12%|█▏        | 6/50 [00:08<01:03,  1.45s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 14%|█▍        | 7/50 [00:10<01:00,  1.41s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 16%|█▌        | 8/50 [00:11<01:00,  1.44s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n\r 18%|█▊        | 9/50 [00:12<00:58,  1.42s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 20%|██        | 10/50 [00:14<00:56,  1.41s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 22%|██▏       | 11/50 [00:15<00:56,  1.46s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 24%|██▍       | 12/50 [00:17<00:56,  1.49s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 26%|██▌       | 13/50 [00:18<00:53,  1.46s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 28%|██▊       | 14/50 [00:20<00:52,  1.46s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 30%|███       | 15/50 [00:21<00:49,  1.43s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n\r 32%|███▏      | 16/50 [00:23<00:47,  1.41s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 34%|███▍      | 17/50 [00:24<00:45,  1.38s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 36%|███▌      | 18/50 [00:25<00:45,  1.41s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 38%|███▊      | 19/50 [00:27<00:43,  1.40s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 40%|████      | 20/50 [00:28<00:42,  1.42s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 42%|████▏     | 21/50 [00:30<00:41,  1.42s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 44%|████▍     | 22/50 [00:31<00:40,  1.45s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 46%|████▌     | 23/50 [00:33<00:42,  1.57s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 48%|████▊     | 24/50 [00:35<00:40,  1.55s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 50%|█████     | 25/50 [00:36<00:37,  1.50s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 52%|█████▏    | 26/50 [00:37<00:36,  1.51s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 54%|█████▍    | 27/50 [00:39<00:34,  1.51s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 56%|█████▌    | 28/50 [00:40<00:31,  1.43s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 58%|█████▊    | 29/50 [00:42<00:29,  1.42s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 60%|██████    | 30/50 [00:43<00:27,  1.38s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 62%|██████▏   | 31/50 [00:44<00:26,  1.39s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 64%|██████▍   | 32/50 [00:46<00:25,  1.40s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n/tmp/ipykernel_118541/3300034538.py:81: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  next_population[next_population[\"trait\"] == \"B\"].loc[i, \"trait\"] = \"A\"\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 66%|██████▌   | 33/50 [00:47<00:23,  1.39s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 68%|██████▊   | 34/50 [00:48<00:22,  1.38s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 70%|███████   | 35/50 [00:50<00:22,  1.53s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 72%|███████▏  | 36/50 [00:52<00:21,  1.54s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 74%|███████▍  | 37/50 [00:54<00:20,  1.59s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 76%|███████▌  | 38/50 [00:55<00:19,  1.63s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 78%|███████▊  | 39/50 [00:57<00:17,  1.58s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 80%|████████  | 40/50 [00:58<00:15,  1.52s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 82%|████████▏ | 41/50 [01:00<00:13,  1.50s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 84%|████████▍ | 42/50 [01:01<00:11,  1.43s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 86%|████████▌ | 43/50 [01:02<00:09,  1.37s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 88%|████████▊ | 44/50 [01:03<00:07,  1.33s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 90%|█████████ | 45/50 [01:04<00:06,  1.29s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 92%|█████████▏| 46/50 [01:06<00:05,  1.26s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 94%|█████████▍| 47/50 [01:07<00:03,  1.26s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 96%|█████████▌| 48/50 [01:08<00:02,  1.26s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r 98%|█████████▊| 49/50 [01:09<00:01,  1.26s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r100%|██████████| 50/50 [01:11<00:00,  1.25s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\r100%|██████████| 50/50 [01:11<00:00,  1.42s/it]\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](chapter08_files/figure-html/cell-9-output-119.png){width=571 height=427}\n:::\n:::\n\n\n",
    "supporting": [
      "chapter08_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
{
  "hash": "261be05118625f43e03dbe00479b666f",
  "result": {
    "markdown": "# Randomness and order {#sec-randomness}\n\nThis course is about music and evolution,\nspecifically about using computational models\nto better understand the mechanisms underlying certain evolutionary\nprocesses. In order to do so, we will often run simulations \nto observe and interpret the resulting scenarios against the backdrop\nof our modeling assumptions and our domain knowledge.\n\nSimulations are useful because for many situations we \nare not able to provide deterministic mathematical formulae to obtain \noutcomes from inputs. Rather, we incorporate our knowledge about the world\nin a computational model and use randomness to include the inherent uncertainty\nabout the exact outcomes of the simulations.\n\nBut randomness is a difficult concept to capture. \nFor the purpose of this book, we will simulate a speficic kind of randomness\nby sampling from a certain set of items.\nLess technically, we can imagine a bag with a certain number of balls in it,\neach having a certain color (multiple balls can have the same color). \nA _random uniform sample with replacement_ then corresponds to picking a \nball from the bag without looking in it and putting it back in the bag.\n\n## Random draws from a bag\n\nLet's try this in Python. We will use the `random` modul of the _NumPy_ library:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\n\nbag = range(4)\nball = np.random.choice(bag)\n\nprint(ball)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n2\n```\n:::\n:::\n\n\nIf this draw were really random, we would expect that each number is equally likely.\nWe can test this by repeating this procedure again and again, tallying the result each time.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nsamples = []\n\nfor i in range(1000):\n    ball = np.random.choice(bag)\n    samples.append(ball)\n\ns = pd.Series(samples)\n\nprint(s.head(10))\nprint(s.value_counts().sort_index())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    1\n1    1\n2    2\n3    0\n4    1\n5    1\n6    0\n7    0\n8    2\n9    1\ndtype: int64\n0    265\n1    237\n2    249\n3    249\ndtype: int64\n```\n:::\n:::\n\n\nThe number are not exactly the same but pretty close. If we would continue sampling\nfrom our bag, they would get more and more similar to one another.\nIt is easier to understand this by visualizing it.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ns.value_counts().sort_index().plot(kind=\"bar\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](randomness_files/figure-pdf/cell-4-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\nNow, what if the numbers in the bag were not just numbered,\nbut had different colors? Let's assume we have another bag, `bag2`,\nwith 4 balls, three brown, one blue:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nbag2 = [\"brown\", \"brown\", \"brown\", \"blue\"]\n\nsamples2 = []\n\nfor i in range(1000):\n    ball = np.random.choice(bag2)\n    samples2.append(ball)\n\ns2 = pd.Series(samples2)\n\nprint(s2.head(10))\nprint(s2.value_counts().sort_index())\n\ns2.value_counts().sort_index().plot(kind=\"bar\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    brown\n1    brown\n2    brown\n3    brown\n4    brown\n5     blue\n6    brown\n7    brown\n8    brown\n9    brown\ndtype: object\nblue     237\nbrown    763\ndtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](randomness_files/figure-pdf/cell-5-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\nThis is remarkable: by randomly (uniformly) drawing from the \nsecond bag, the frequencies of all samples approach the ratio of brown to blue\nballs (3:1)!\n\n## Composing random melodies\n\nSince this book is about music, let's see how we can use randomness \nto create (a resemblance of) music. For instance, we can 'compose'\na random melody by using only the white keys on a piano within some octave:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nnotes = list(\"CDEFGAB\")\nmelody = np.random.choice(notes, size=10)\nprint(melody, end=\" \")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['G' 'F' 'G' 'A' 'C' 'E' 'C' 'D' 'F' 'B'] \n```\n:::\n:::\n\n\nWe composed a little melody by randomly drawing a note from the list of notes.\nThis is also called _sampling_. Note that some notes repeat, showing that we \nsample with replacement: after each draw, the note is put back in the bag,\nso to speak. Of course, there are many things that we would have to generate, too, to make this a real melody. For instance, we do not know the duration of \nany of these notes, we don't know the meter nor the key, we don't know the\ntempo or volume, and so on. But our goal here is not to create a beautiful piece \nof music, but rather to show how we can use randomness to generate something.\n\nAs you might remember from the previous chapter, we can also write a function \nto do this, so that we can perform this operation (composition of a random \nmelody) more easily, while at the same time having more control over it \nthrough its parameters. The following function does exactly this, having \nonly one parameter that controlls the length of the melody (the number of\nnotes to be sampled).\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef melody(n):\n    notes = list(\"CDEFGAB\")\n    return np.random.choice(notes, size=n)\n```\n:::\n\n\nWe can now use this function to easily create random melodies of \ndifferent lengths:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprint(melody(7))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['B' 'D' 'C' 'A' 'F' 'G' 'D']\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(melody(12))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['F' 'B' 'G' 'B' 'A' 'D' 'A' 'F' 'B' 'F' 'F' 'C']\n```\n:::\n:::\n\n\n## Random Bach \n\nFour-part writing is a core part of Western composition history.\nHere, we will build a mock version of a four-part chorale by randomly \ngenerating each voice and putting them together in a table. \nDoing so will show you how you can create tables, which we will need later on.\nThe most popular way to work with tables in Python is by using the `pandas` library. In `pandas`, tables are called 'data frames', and there is a `DataFrame`\nobject to represent tables. Let's see how we could create a four-part homophonic \nchorale with eight 'chords':\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nimport pandas as pd\n\nchorale = pd.DataFrame({\n    \"S\" : melody(n=8),\n    \"A\" : melody(n=8),\n    \"T\" : melody(n=8),\n    \"B\" : melody(n=8)\n})\n```\n:::\n\n\nThe variable `chorale` now stores our little composition and we can inspect it:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nchorale\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=tex}\n\\begin{tabular}{lllll}\n\\toprule\n{} &  S &  A &  T &  B \\\\\n\\midrule\n0 &  G &  A &  A &  G \\\\\n1 &  A &  C &  A &  A \\\\\n2 &  D &  D &  D &  F \\\\\n3 &  B &  D &  B &  G \\\\\n4 &  F &  A &  A &  A \\\\\n5 &  C &  F &  E &  E \\\\\n6 &  G &  A &  A &  A \\\\\n7 &  B &  D &  G &  E \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nHere we have generated each voice using the `melody` function. \nWe can use it to create a new function that will directly give us a new \nchorale of a certain length:\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndef chorale(n):\n    df = pd.DataFrame({\n        \"S\" : melody(n=n),\n        \"A\" : melody(n=n),\n        \"T\" : melody(n=n),\n        \"B\" : melody(n=n)\n    })\n\n    return df\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nmy_chorale = chorale(n=12)\nmy_chorale\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=tex}\n\\begin{tabular}{lllll}\n\\toprule\n{} &  S &  A &  T &  B \\\\\n\\midrule\n0  &  B &  E &  F &  F \\\\\n1  &  E &  A &  E &  B \\\\\n2  &  F &  A &  E &  D \\\\\n3  &  B &  A &  F &  A \\\\\n4  &  D &  B &  D &  E \\\\\n5  &  G &  B &  B &  A \\\\\n6  &  B &  E &  B &  D \\\\\n7  &  C &  D &  D &  E \\\\\n8  &  F &  D &  B &  F \\\\\n9  &  E &  C &  C &  F \\\\\n10 &  A &  A &  E &  C \\\\\n11 &  B &  C &  F &  A \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Accessing data\n\nHaving the variable `my_chorale` store our data frame, \nthis is how we can access individual voices:\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nmy_chorale[\"T\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=tex}\n\\begin{tabular}{ll}\n\\toprule\n{} &  T \\\\\n\\midrule\n0  &  F \\\\\n1  &  E \\\\\n2  &  E \\\\\n3  &  F \\\\\n4  &  D \\\\\n5  &  B \\\\\n6  &  B \\\\\n7  &  D \\\\\n8  &  B \\\\\n9  &  C \\\\\n10 &  E \\\\\n11 &  F \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nYou can verify that it is the same 'melody' as above in the chorale. \nIf we want a specific note from this voice, say the fifth one, \nwe can access is this way:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nmy_chorale[\"T\"][4]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n'D'\n```\n:::\n:::\n\n\nWe first select the \"T\" column, and then select the fifth element \n(remember that we start counting at 0, so we need to insert 4 to get the \nfifth). We can also get entire ranges of a voice:\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nmy_chorale[\"A\"][4:8]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=tex}\n\\begin{tabular}{ll}\n\\toprule\n{} &  A \\\\\n\\midrule\n4 &  B \\\\\n5 &  B \\\\\n6 &  E \\\\\n7 &  D \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nThis gives us the fifths to ninth note in the Alto voice. \nIf we want to apply the same logic also to column ranges, \nwe have to write it a bit differently using the `.loc()`\nmethod for localising data:\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nmy_chorale.loc[1:3, \"S\":\"A\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=tex}\n\\begin{tabular}{lll}\n\\toprule\n{} &  S &  A \\\\\n\\midrule\n1 &  E &  A \\\\\n2 &  F &  A \\\\\n3 &  B &  A \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n`.loc()` takes two arguments: the rows (or row range),\nand the columns (or column range). We can use it to 'slice'\nour data frame in order to get specific portions of it.\n\n",
    "supporting": [
      "randomness_files/figure-pdf"
    ],
    "filters": []
  }
}
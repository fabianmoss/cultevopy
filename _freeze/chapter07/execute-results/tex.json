{
  "hash": "21cfb4ec7e35bc04570581d68565d572",
  "result": {
    "markdown": "---\nsubtitle: ''\n---\n\n# Biased transmission: demonstrator-based indirect bias {#sec-demonstrator-biased-transmission}\n\n:::{.callout-note}\nThis chapter is based on \"Chapter 5: Biased transmission: demonstrator-based indirect bias\" in @Acerbi2022.\n:::\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np \nrng = np.random.default_rng()\n\nimport pandas as pd\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef plot_multiple_runs(data_model):\n    groups = data_model.groupby(\"run\")\n    for _, g in groups:\n        g.index = g[\"generation\"]\n        g[\"p\"].plot(lw=.5, ylim=(0,1))\n\n    data_model.groupby(\"generation\")[\"p\"].mean().plot(c=\"k\", lw=\"1\")\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nN = 100\np_0 = 0.5\np_s = 0.05\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npopulation = pd.DataFrame({\n    \"trait\": rng.choice([\"A\", \"B\"], size=N, replace=True, p=[p_0, 1-p_0]),\n    \"status\": rng.choice([\"high\", \"low\"], size=N, replace=True, p=[p_s, 1-p_s])\n})\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\npopulation.head()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/home/fmoss/.local/lib/python3.10/site-packages/IPython/core/formatters.py:343: FutureWarning: In future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n  return method()\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=tex}\n\\begin{tabular}{lll}\n\\toprule\n{} & trait & status \\\\\n\\midrule\n0 &     A &    low \\\\\n1 &     B &    low \\\\\n2 &     B &    low \\\\\n3 &     A &    low \\\\\n4 &     A &    low \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\np_low = 0.01\np_demonstrator = np.ones(N)\np_demonstrator[ population[\"status\"] == \"low\" ] = p_low\n```\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nif sum(p_demonstrator) > 0:\n    ps = p_demonstrator / p_demonstrator.sum()\n    demonstrator_index = rng.choice(np.arange(N), size=N, p=ps, replace=True)\n    population[\"trait\"] = population.loc[demonstrator_index, \"trait\"].values\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndef biased_transmission_demonstrator(N, p_0, p_s, p_low, t_max, r_max):\n    # Create the output DataFrame\n    output = pd.DataFrame({\n        \"generation\" : np.tile(np.arange(t_max), r_max),\n        \"p\" : [ np.nan ] * t_max * r_max,\n        \"run\" : np.repeat(np.arange(r_max), t_max)\n    })\n    \n    for r in range(r_max):\n            # Create first generation\n            population = pd.DataFrame({\n                \"trait\": rng.choice([\"A\", \"B\"], size=N, replace=True, p=[p_0, 1-p_0]),\n                \"status\": rng.choice([\"high\", \"low\"], size=N, replace=True, p=[p_s, 1-p_s])\n            })\n            \n            # Assign copying probabilities based on individuals' status\n            p_demonstrator = np.ones(N)\n            p_demonstrator[population[\"status\"] == \"low\"] = p_low\n            \n            # Add first generation's p for run r\n            output.loc[ r * t_max, \"p\"] = population[ population[\"trait\"] == \"A\" ].shape[0] / N\n            \n            for t in range(1, t_max):\n                # Copy individuals to previous_population DataFrame\n                previous_population = population.copy()\n                \n                # Copy traits based on status\n                if sum(p_demonstrator) > 0:\n                    ps = p_demonstrator / p_demonstrator.sum()\n                    demonstrator_index = rng.choice(np.arange(N), size=N, p=ps, replace=True)\n                    population[\"trait\"] = population.loc[demonstrator_index, \"trait\"].values\n                \n                # Get p and put it into output slot for this generation t and run r\n                output.loc[r * t_max + t, \"p\"] = population[ population[\"trait\"] == \"A\" ].shape[0] / N\n                \n    return output\n\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndata_model = biased_transmission_demonstrator(N=100, p_s=0.05, p_low=0.0001, p_0=0.5, t_max=50, r_max=10)\n```\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nplot_multiple_runs(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter07_files/figure-pdf/cell-11-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndata_model = biased_transmission_demonstrator(N=10_000, p_s=0.005, p_low=0.0001, p_0=0.5, t_max=200, r_max=10)\nplot_multiple_runs(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter07_files/figure-pdf/cell-12-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndef biased_transmission_demonstrator_2(N, p_0, p_s, p_low, t_max, r_max):\n    # Create the output DataFrame\n    output = pd.DataFrame({\n        \"generation\" : np.tile(np.arange(t_max), r_max),\n        \"p\" : [ np.nan ] * t_max * r_max,\n        \"run\" : np.repeat(np.arange(r_max), t_max)\n    })\n    \n    ...\n    \n    return output\n```\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndata_model = biased_transmission_demonstrator_2(N=100, p_s=0.1, p_low=0.0001, p_0=0.5, t_max=50, r_max=50)\n```\n:::\n\n\n",
    "supporting": [
      "chapter07_files/figure-pdf"
    ],
    "filters": []
  }
}
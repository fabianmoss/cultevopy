{
  "hash": "79a0c95bef43407ae89daa0060d707f7",
  "result": {
    "engine": "jupyter",
    "markdown": "# The multiple traits model {#sec-multiple-traits}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nrng = np.random.default_rng()\n\nimport matplotlib.pyplot as plt\n\nN = 100\npopulation = pd.DataFrame(\n    {\"trait\" : rng.integers(N, size=N)}\n)\n```\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npopulation.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>trait</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>35</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>75</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef multiple_traits(N, t_max):\n    output = pd.DataFrame({\n        \"trait\" : np.repeat(np.arange(N), t_max),\n        \"generation\" : np.tile(np.arange(t_max), N),\n        \"p\" : [ np.nan ] * t_max * N,\n    })\n\n    # Create first generation \n    population = pd.DataFrame({\"trait\" : rng.integers(N, size=N)})\n\n    # Add first generation's p for all traits\n    output.loc[output[\"generation\"] == 0, \"p\"] = population[\"trait\"].value_counts(normalize=True).reindex(range(N)).fillna(0.).values\n\n    for t in range(t_max):\n        # Copy individuals to previous_population DataFrame\n        previous_population = population.copy()\n\n        # Randomly copy from previous generation\n        population = pd.DataFrame({\"trait\" : previous_population[\"trait\"].sample(N, replace=True)})\n\n        # Get p for all traits and put it into output slot for this generation t\n        output.loc[output[\"generation\"] == t, \"p\"] = population[\"trait\"].value_counts(normalize=True).reindex(range(N)).fillna(0.).values\n\n    return output\n```\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef plot_multiple_traits(data_model):\n    ps = []\n    for _, g in data_model.groupby(\"trait\"):\n        x = g[\"generation\"]\n        ps.append(g[\"p\"])\n\n    plt.stackplot(x, *ps, cmap=\"tab20\")\n    plt.margins(0.)\n    plt.show()\n```\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndata_model = multiple_traits(N=100, t_max=200)\nplot_multiple_traits(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter09_files/figure-pdf/cell-6-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndata_model = multiple_traits(N=100, t_max=1000)\nplot_multiple_traits(data_model)\n```\n\n::: {.cell-output .cell-output-display}\n![](chapter09_files/figure-pdf/cell-7-output-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## Introducing innovation\n\n",
    "supporting": [
      "chapter09_files/figure-pdf"
    ],
    "filters": []
  }
}
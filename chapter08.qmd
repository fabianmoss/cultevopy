---
# title: "Vertical and horizontal transmission"
number-sections: true
jupyter: python3
execute:
  freeze: auto  # re-render only when source changes
---

<!-- :::{.callout-note}
This chapter is based on "Chapter 6: Vertical and horizontal transmission" in @Acerbi2022.
::: -->

# Vertical and horizontal cultural transmission {#sec-vertical-horizontal}

```{python}
import numpy as np 
rng = np.random.default_rng()

import pandas as pd
from tqdm import tqdm
```

```{python}
def plot_multiple_runs(data_model):
    groups = data_model.groupby("run")
    for _, g in groups:
        g.index = g["generation"]
        g["p"].plot(lw=.5, ylim=(0,1))

    data_model.groupby("generation")["p"].mean().plot(c="k", lw="1")
```

```{python}
def vertical_transmission(N, p_0, b, t_max, r_max):
    # Create the output DataFrame
    output = pd.DataFrame({
        "generation" : np.tile(np.arange(t_max), r_max),
        "p" : [ np.nan ] * t_max * r_max,
        "run" : np.repeat(np.arange(r_max), t_max)
    })

    for r in range(r_max): 
        # Create first generation
        population = pd.DataFrame({"trait": rng.choice(["A", "B"], size=N, replace=True, p=[p_0, 1 - p_0])})

        # Add first generation's p for run r
        output.loc[ r * t_max, "p"] = population[ population["trait"] == "A" ].shape[0] / N

        # # For each generation 
        for t in range(1, t_max): 
            # Copy individuals to previous_population DataFrame
            previous_population = population.copy()

            # randomly pick mothers and fathers
            mother = previous_population["trait"].sample(N, replace=True).reset_index(drop=True)
            father = previous_population["trait"].sample(N, replace=True).reset_index(drop=True)

            # prepare next generation
            population = pd.DataFrame({"trait": [np.nan] * N })

            # Both parents are A, thus child adopts A
            both_A = (mother == "A") & (father == "A")
            # if sum(both_A) > 0:
            population.loc[both_A,"trait"] = "A"

            # Both parents are A, thus child adopts A
            both_B = (mother == "B") & (father == "B")
            # if sum(both_B) > 0:
            population.loc[both_B,"trait"] = "B"

            # If any empty NA slots are present (i.e. one A and one B parent) they adopt A with probability b
            remaining = rng.choice(["A", "B"], size=population["trait"].isna().sum(), replace=True, p=[b, 1 - b])
            population.loc[population["trait"].isna(),"trait"] = remaining
            
            # Get p and put it into output slot for this generation t and run r
            output.loc[r * t_max + t, "p"] = population[ population["trait"] == "A" ].shape[0] / N

    return output 
```

```{python}
data_model = vertical_transmission(N=10_000, p_0=0.01, b=0.6,t_max=50, r_max=5)

plot_multiple_runs(data_model)
```

```{python}
data_model = vertical_transmission(N=10_000, p_0=0.1, b=0.5,t_max=50, r_max=5)
plot_multiple_runs(data_model)
```

::: {.callout-warning}
The code below is not yet correct and runs very slowly.
:::

```{python}
def vertical_horizontal_transmission(N, p_0, b, n, g, t_max, r_max):
    # Create the output DataFrame
    output = pd.DataFrame({
        "generation" : np.tile(np.arange(t_max), r_max),
        "p" : [ np.nan ] * t_max * r_max,
        "run" : np.repeat(np.arange(r_max), t_max)
    })

    for r in range(r_max):
        # Create first generation
        population = pd.DataFrame({"trait": rng.choice(["A", "B"], size=N, replace=True, p=[p_0, 1 - p_0])})

        # Add first generation's p for run r
        output.loc[ r * t_max, "p"] = population[ population["trait"] == "A" ].shape[0] / N

        # For each generation 
        for t in tqdm(range(t_max)):
            ### Vertical transmission =========================================================

            # Copy individuals to previous_population DataFrame
            previous_population = population.copy()

            # randomly pick mothers and fathers
            mother = previous_population["trait"].sample(N, replace=True).reset_index(drop=True)
            father = previous_population["trait"].sample(N, replace=True).reset_index(drop=True)

            # prepare next generation
            population = pd.DataFrame({"trait": [np.nan] * N })

            # Both parents are A, thus child adopts A
            both_A = (mother == "A") & (father == "A")
            # if sum(both_A) > 0:
            population.loc[both_A,"trait"] = "A"

            # Both parents are A, thus child adopts A
            both_B = (mother == "B") & (father == "B")
            # if sum(both_B) > 0:
            population.loc[both_B,"trait"] = "B"

            # If any empty NA slots are present (i.e. one A and one B parent) they adopt A with probability b
            remaining = rng.choice(["A", "B"], size=population["trait"].isna().sum(), replace=True, p=[b, 1 - b])
            population.loc[population["trait"].isna(),"trait"] = remaining
            
            # Get p and put it into output slot for this generation t and run r
            output.loc[r * t_max + t, "p"] = population[ population["trait"] == "A" ].shape[0] / N

            ## Horizontal transmission =========================================================

            previous_population = population.copy()
            # # N_B = number of Bs
            N_B = previous_population[previous_population["trait"] == "B"].shape[0]

            # if there are B individuals to switch, and n is not zero:
            if (N_B > 0) & (n > 0):
                # for each B individual:
                for i in range(N_B):
                    # Pick n demonstrators
                    demonstrator = previous_population["trait"].sample(n, replace=True)
                    # Get probability g 
                    copy_ = rng.choice([True, False], n, p=[g, 1 - g], replace=True)
                    # if any demonstrators with A are to be copied:
                    if sum((demonstrator == "A") & (copy_)) > 0:
                      # The B individual switches to A 
                      # TODO: Here's the bug!
                      population[previous_population["trait"] == "B"].at[i, "trait"] = "A"

            next_population = population.copy()
            # # N_B = number of Bs
            N_B = next_population[next_population["trait"] == "B"].shape[0]

            # if there are B individuals to switch, and n is not zero:
            if (N_B > 0) & (n > 0):
                # for each B individual:
                for i in range(N_B):
                    # Pick n demonstrators
                    demonstrator = population["trait"].sample(n, replace=True)
                    # Get probability g 
                    copy_ = rng.choice([True, False], n, p=[g, 1 - g], replace=True)
                    # if any demonstrators with A are to be copied:
                    if sum((demonstrator == "A") & (copy_)) > 0:
                      # The B individual switches to A 
                      next_population[next_population["trait"] == "B"].at[i, "trait"] = "A"

            # Get p and put it into output slot for this generation t and run r
            output.loc[r * t_max + t, "p"] = next_population[ next_population["trait"] == "A" ].shape[0] / N

    return output
```

```{python}
vertical_horizontal_transmission(N=1000, p_0=0.01, b=0.5, n=5, g=0.1, t_max=10, r_max=1)
```

```{python}
# data_model = vertical_horizontal_transmission(N=5_000, p_0=0.01, b=0.5, n=5, g=0.1, t_max=50, r_max=2)
# plot_multiple_runs(data_model)
```


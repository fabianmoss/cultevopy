---
title: "Introduction"
---

## The Cultural Evolution of Music

The field of cultural evolution emerged in the 1980's, 
and has, in parallel with the advancement of computational facilities,
gained momentum. In recent years, several approaches have attempted to 
apply formal models from cultural evolution to the domain of music. 

In the present context, we first introduce some central ideas of cultural evolution and review a few major publications for the domain of music.

A few selected important contributions are: 
- "Cultural Transmission and Evolution: A Quantitative Approach" [@Cavalli-Sforza1981_CulturalTransmissionEvolution]
- "Culture and the Evolutionary Process" [@Boyd1985]
- "The Memetics of Music" [@Jan2016]
- "Cultural Evolution and Music" [@Youngblood2021]
- "Cultural Evolution of Music" [@Savage2019]

## Music evolution

- [@Wallin2001_OriginsMusic]
- [@Morley2013_PrehistoryMusicHuman]
- [@Tomlinson2018_MillionYearsMusic]
- [@Honing2018_BiologicalBasisMusicality]

## Music history and cultural evolution

...

## Central ideas and overview

Following this introduction, we introduce some minimal requirements to use Python for this course (@sec-python_primer). Subsequently, we introduce with six central mechanisms for cultural inheritance: unbiased transmission (@sec-unbiased_transmission), unbiased and biased mutation (@sec-unbiased_biased_mutation), directly biased transmission (@sec-direct-biased-transmission), frequency-dependent indirectly biased transmission (@sec-frequency-biased-transmission), and demonstrator-based indirectly biased transmission (@sec-demonstrator-biased-transmission). 

We follow up with a chapter on vertical and horizontal transmission, and finally introduce the multiple traits model.

Schematically, this is shown in the following diagram:

```{mermaid}
flowchart TD
  C[Cultural inheritance] --> T(Transmission)
  C --> M(Mutation)
  T --> BT(Biased)
  T --> UT(Unbiased)
  M --> BM(Biased)
  M --> UM(Unbiased)
  BT --> D(Direct)
  BT --> I(Indirect)
  I --> FD(Frequency-Dependent)
  I --> DB(Demonstrator-Based)
```